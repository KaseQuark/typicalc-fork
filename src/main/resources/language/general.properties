root.typicalc=Typicalc
root.german=Deutsch
root.english=English
root.lambda=\u03BB
root.allQuantifier=∀
root.emptySet=∅
root.examplebutton=\uD83D\uDCC2
root.exampleTerms=\
  λx.x,\
  λx.λy.y x,\
  (λx.x true) (y g),\
  let f = λx. g y y in f 3,\
  let k = λx.λy. x in k a (k b c),\
  let f = (λx.y x) (y 5) in λg.f 3,\
  (λx.x x) (λx.x x),\
  (λx.λy.y (x y)) (λz. λa. z g a),\
  let f = λx. let g = λy. y in g x in f 3,\
  let f = λx. let g = λy.5 5 in g x in f 3

root.λx.x=∅
root.λx.λy.yx=∅
root.(λx.xtrue)(yg)=∅;y: int->boolean->τ₁, g: boolean;y: int->boolean->τ₁, g: τ₁;y: int->boolean->τ₁, g: ∀τ₁.τ₁
root.letfλx.gyyinf3=∅;g: a->b->a;g: int->int->boolean;g: int->int->boolean, y: bool;g: int->int->boolean, y: τ₁
root.letkλx.λy.xinka(kbc)=∅;a: τ₁;a: ∀τ₁.τ₁->int, b: a;a: int, b: boolean, c: char
root.letf(λx.yx)(y5)inλg.f3=∅;y: int->(int->boolean);y: τ₁->(int->boolean);y: ∀τ₁.τ₁->(int->boolean)
root.(λx.xx)(λx.xx)=∅
root.(λx.λy.y(xy))(λz.λa.zga)=∅;g: boolean;a: int, g: boolean->int;g: ∀τ₂.τ₁->τ₂
root.letfλx.letgλy.yingxinf3=∅;g: boolean->int->boolean
root.letfλx.letgλy.55ingxinf3=∅

root.termGrammar=\u2329Term\u232A ::= (\u2329Term\u232A) | \u2329App\u232A | \u2329Abs\u232A | \
\u2329Let\u232A | \u2329Var\u232A | \u2329Const\u232A <br> \
\u2329App\u232A ::= \u2329Term\u232A \u2329Term\u232A <br> \
\u2329Abs\u232A ::= λ\u2329Var\u232A.\u2329Term\u232A <br> \
\u2329Let\u232A ::= <b>let</b> \u2329Var\u232A = \u2329Term\u232A <b>in</b> \u2329Term\u232A <br> \
\u2329Var\u232A ::= [a-zA-Z][a-zA-Z0-9]* <br> \
\u2329Const\u232A ::= [0-9]+ | true | false

root.typeGrammar=\u2329Type\u232A ::= \u2329QuantifiedType\u232A | \u2329NormalType\u232A <br> \
\u2329QuantifiedType\u232A ::= <b>∀</b>\u2329EnumVarType\u232A<b>.</b>\u2329NormalType\u232A <br> \
\u2329NormalType\u232A ::= (\u2329NormalType\u232A) | \u2329NamedType\u232A | \u2329VarType\u232A | \
\u2329FunctionType\u232A <br> \
\u2329NamedType\u232A ::= [a-zA-Z][a-zA-Z0-9]*&nbsp;&nbsp\\t[0-9]+ <br> \
\u2329EnumVarType\u232A ::= \u2329VarType\u232A <b>,</b> \u2329EnumVarType\u232A | \u2329VarType\u232A <br>\
\u2329VarType\u232A ::= t[0-9]+ <br> \
\u2329FunctionType\u232A ::= \u2329NormalType\u232A -> \u2329NormalType\u232A

root.appLatex=\
\\begin{prooftree}\
\\AxiomC{$\\Gamma \\vdash t_1 : \\tau_1 \\rightarrow \\tau_2$}\
\
\\AxiomC{$\\Gamma \\vdash t_2 : \\tau_1$}\
\
\\LeftLabel{\\textrm A{\\small PP}}\
\\BinaryInfC{$\\Gamma \\vdash t_1 \\ t_2 : \\tau_2$}\
\\end{prooftree}

root.absLatex=\
\\begin{prooftree}\
\\AxiomC{$\\Gamma , \\texttt{x}: \\tau_1 \\vdash t : \\tau_2$}\
\
\\LeftLabel{\\textrm A{\\small BS}}\
\\UnaryInfC{$\\Gamma \\vdash \\lambda \\texttt{x}.t : \\tau_1 \\rightarrow \\tau_2$}\
\\end{prooftree}

root.varLatex=\
\\begin{prooftree}\
\\AxiomC{$\\Gamma (\\texttt{x}) = \\tau$}\
\
\\LeftLabel{\\textrm V{\\small AR}}\
\\UnaryInfC{$\\Gamma \\vdash \\texttt{x} : \\tau$}\
\\end{prooftree}

root.constLatex=\
\\begin{prooftree}\
\\AxiomC{$\\texttt{c} \\in Const$}\
\
\\LeftLabel{\\textrm C{\\small ONST}}\
\\UnaryInfC{$\\Gamma \\vdash \\texttt{c} : \\tau$}\
\\end{prooftree}

root.letLatex=\
\\begin{prooftree}\
\\AxiomC{$\\Gamma \\vdash t_1 : \\tau_1$}\
\
\\AxiomC{$\\Gamma , \\texttt{x} : ta(\\tau_1 , \\Gamma ) \\vdash t_2 : \\tau_2$}\
\
\\LeftLabel{\\textrm L{\\small ET}}\
\\BinaryInfC{$\\Gamma \\vdash \\textbf{let} \\ \\texttt{x} = t_1 \\ \\textbf{in} \\ t_2 : \\tau_2$}\
\\end{prooftree}

root.varLetLatex=\
\\begin{prooftree}\
\\AxiomC{$\\Gamma (\\texttt{x}) = \\tau'$}\
\
\\AxiomC{$\\tau' \\succeq \\tau$}\
\
\\LeftLabel{\\textrm V{\\small AR}}\
\\BinaryInfC{$\\Gamma \\vdash \\texttt{x} : \\tau$}\
\\end{prooftree}

share.neededPackagesTree=\
\\usepackage{bussproofs}\n\
\\usepackage{amsmath}
share.neededPackagesUnification=\
\\usepackage[dvipsnames]{xcolor}\n\
\\usepackage{amsmath}\n\
\\usepackage{stix}
