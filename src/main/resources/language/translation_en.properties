root.close=Close
root.save=Save
root.copied=LaTeX code copied to clipboard.
root.selectExample=Select example:
root.typeInfer=Type
root.operatingHelp=Help
root.inputSyntax=Input Syntax
root.inferenceRules=Inference Rules
root.absRule=Abs rule
root.appRule=App rule
root.varRule=Var rule
root.constRule=Const rule
root.letRule=Let rule
root.absRuleLet=Abs rule with Let
root.varRuleLet=Var rule with Let
root.inputFieldPlaceholder=Enter term here. A '\\' is converted to '\u03BB'.
root.selectLanguage=Language
root.termExplanation=The following grammar specifies the structure of a valid term:
root.assExplanation=The following grammar specifies the syntax of a valid type:
root.typeAssumptions=Type Assumptions
root.addAssumption=Add Type Assumption
root.deleteAll=Delete All
root.variable=Variable
root.type=Type
root.title404=404 - Not Found
root.message404=Try /infer/<term> or type your favourite term into the input field.
root.drawer=Drawer (type inference rules)
root.example=Examples
root.shortcuts=Shortcuts
root.inputField=Input Field
root.typeInferButton=Type Button
root.firstStepButton=First-Step Button
root.previousStepButton=Previous-Step Button
root.nextStepButton=Next-Step Button
root.lastStepButton=Last-Step Button
root.shareButton=Share Button
root.inferenceViewFeatures=Inference Tree And Unification
root.helpDrawer=Clicking on the button opens up the drawer. The drawer contains a collection of all type inference \
rules. By clicking on the copy button the LaTeX code of the corresponding rule is copied to the clipboard.
root.helpExample=Clicking on the button opens up the example dialog. After clicking on an example the corresponding \
term is inserted into the input field. Now either the type inference algorithm can be started or the term can be \
modified.
root.helpInputField=The input field allows the user to enter lambda terms with a maximum length of 1000 characters. \
The λ character can be inserted by either clicking the λ button or entering a backslash. \
By clicking on the info icon the grammar defining the valid input syntax is shown.
root.helpTypeAssumptions=Clicking on the type assumptions button opens up a dialog to enter type assumptions. \
By clicking the icon symbol the grammar defining a valid type of a type assumption is shown. If the same variable \
is contained in multiple type assumptions, only the uppermost type assumption containing the variable is used for \
the algorithm. If the type of a type assumptions starts with a 't' followed by only digits, the type is automatically \
converted to a type variable.
root.helpTypeInferButton=Clicking on the type button starts the type inference algorithm for the current input. \
The longer the entered term the longer the time to display the type inference tree. With a slow computer or a \
very long term some patience will be required.
root.helpShortcuts=<kbd>Ctrl</kbd> + <kbd>\u2190</kbd> = First step<br>\
<kbd>\u2190</kbd> = Previous step<br>\
<kbd>\u2192</kbd> = Next step<br>\
<kbd>Ctrl</kbd> + <kbd>\u2192</kbd> = Last step<br>\
<kbd>/</kbd> = Focus input bar
root.helpFirstStepButton=The function of the button depends on the current state of the algorithm. \
If the tree is currently being built up, clicking on the button shows the first step of the inference tree. \
If the unification algorithm is already in progress, clicking on the button shows the last step of the inference \
tree. The key combination <kbd>Ctrl</kbd> + <kbd>\u2190</kbd> also executes a click on the button.
root.helpPreviousStepButton=By clicking the previous step button the previous step of the algorithm is shown. \
The key <kbd>\u2190</kbd> also executes a click on the button.
root.helpNextStepButton=By clicking the next-step button the next step of the algorithm is shown. \
The key  <kbd>\u2192</kbd> also executes a click on the button.
root.helpLastStepButton=The function of the button depends on the current state of the algorithm. \
If the tree is currently being built up, clicking on the button shows the last step of the inference tree. \
If the unification algorithm is already in progress, clicking on the button shows the final type of the  \
entered term. The key combination <kbd>Ctrl</kbd> + <kbd>\u2192</kbd> also executes a click on the button.
root.helpShareButton=Clicking the share button opens up a dialog containing the LaTeX code of the final inference \
tree and the packages needed to compile the LaTeX code. In addition a permalink to the current page is provided. \
This link encodes the current term as well as the current type assumptions.
root.helpInferenceViewFeatures=When a term is successfully type inferred, the inference tree and the unification are \
  displayed. To zoom in and out the inference tree, scroll with your mouse. To move the tree, drag it with your \
  pressed left mouse button. While the tree is building up, the resulting constraints build up simultaneously in the \
  field above. During the unification, the modified constraints are then highlighted in each step. \
  If the entered term contains let polymorphism, the constraints of the let sub-tree are unified before further \
  steps in the tree are shown. At the end, the most general unifier is displayed as \u03C3 and the final type \
  as \u03C3(\u03B1\u2081).
help.typicalcInfo=\
Typicalc was developed as a PSE project at the KIT in WS20/21 by<br>\
  Robin Böhne<br>\
  Moritz Dieing<br>\
  Thomas Heinen<br>\
  Arne Keller<br>\
  Johanna Stuber

root.TOO_FEW_TOKENS=Wrong input! The term ends abruptly.
root.tooFewTokensHelp=Check if all let, abstraction and application terms consist of the required arguments.
root.UNEXPECTED_TOKEN=The input does not match the syntax specified in the info dialog.
root.UNEXPECTED_CHARACTER=The input contains a character which is not allowed at this position.
error.heading=Input is syntactically wrong!
root.wrongCharacter=Wrong character: \u0020
root.position=At Position: \u0020
root.slideExp=Typicalc is an application for the visualisation of type inference. The slideshow below the text \
demonstrates the most important features of the website. In each slide the relevant operating element is surrounded \
by a red border. The buttons at the bottom of the website can be used to navigate through the slides.
root.linkText=Further information on the type inference algorithm can be found \u0020
root.link=https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system
root.here=here
root.image1=/carousel/EnterTerm.png
root.text1=The term \u03BBx.x is entered into the input field.
root.image2=/carousel/OpenTypeAssumptions.png
root.text2=The type assumptions button is clicked to open up a dialog to enter type assumptions.
root.image3=/carousel/EnterTypeAssumptions.png
root.text3=A type assumption with variable "x" and type "int" is being entered.
root.image4=/carousel/ClickTypeButton.png
root.text4=The type button is clicked to start the type inference algorithm.
root.image5=/carousel/NavigateTree.png
root.text5=The buttons at the bottom of the website can be used to navigate through the steps of the algorithm.
root.image6=/carousel/EndOfTree.png
root.text6=At the end of the algorithm the MGU, the final type and the final tree of the entered term are being \
displayed.
root.image7=/carousel/OpenExportDialog.png
root.text7=The share button is clicked to open up the corresponding dialog.
root.image8=/carousel/UseExportDialog.png
root.text8=The dialog contains a permalink to the current page, the LaTeX-code of the tree and the packages needed \
to compile the code.
root.correctAssumptions=Correct or delete the invalid type assumptions (red background) before closing the dialog. 
root.copyLatexTooltip=Copy LaTeX code
root.drawerToggleTooltip=Type inference rules
root.helpIconTooltip=Help and language switch
root.exampleTooltip=Example terms
root.shareButtonTooltip=LaTeX code and permalink
root.lastStepTooltip=Last step
root.firstStepTooltip=First step
root.previousStepTooltip=Previous step
root.nextStepTooltip=Next step

root.absLetLatex=\
\\begin{prooftree}\
\\AxiomC{$\\Gamma , \\texttt{x}: \\tau_1 \\vdash t : \\tau_2$}\
\
\\AxiomC{$\\tau_1$ \\ \\texttt{no type scheme}}\
\
\\LeftLabel{\\rm A{\\small BS}}\
\\BinaryInfC{$\\Gamma \\vdash \\lambda \\texttt{x}.t : \\tau_1 \\rightarrow \\tau_2$}\
\\end{prooftree}

root.infinite_type = The entered term cannot be typed: \
  The {\\color{#f00}highlighted} constraint would cause an infinite type!
root.different_types = The entered term cannot be typed: \
  The {\\color{#f00}highlighted} constraint contains two incompatible types!

share.heading=Share
share.url.label=URL
share.packagesTree.label=Packages (inference tree)
share.latexTree.label=LaTeX code (inference tree)
share.packagesUnification.label=Packages (unification/MGU)
share.latexUnification.label=LaTeX code (unifcation/MgU)
