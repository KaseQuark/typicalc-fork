package edu.kit.typicalc.model.type;

import edu.kit.typicalc.model.TypeVariableFactory;

import java.util.List;

/**
 * Models a type abstraction with its type and the type variables bound by the for-all
 * quantifier.
 */
public class TypeAbstraction {

    private Type type;
    private List<TypeVariable> quantifiedVariables;
    /**
     * Initializes a new type abstraction with its type and the type variables bound by
     * the for-all quantifier.
     * @param type  the type of the type abstraction
     * @param quantifiedVariables the type variables bound by the for-all quantifier
     */
    public TypeAbstraction(Type type, List<TypeVariable> quantifiedVariables) {
        this.type = type;
        this.quantifiedVariables = quantifiedVariables;
    }

    /**
     * Initializes a new type abstraction with its type and no type variables bound by the
     * for-all quantifier.
     * @param type the type of the type abstraction
     */
    public TypeAbstraction(Type type) {
        this.type = type;
        this.quantifiedVariables = null;
    }

    /**
     * Instantiates the type abstraction with a new type and returns it. The new type
     * contains new type variables generated by the given type variable factory.
     * @param typeVarFactory  the type variable factory used to generate the new type
     * variables
     * @return the new type resulting from the instantiation of the type abstraction
     */
    public Type instantiate(TypeVariableFactory typeVarFactory) {
        //TODO
        return null;
    }

    /**
     * Indicates whether any type variables are quantified in the type abstraction.
     * @return true if one or more type variables are quantified, false otherwise
     */
    public boolean hasQuantifiedVariables() {
        return !quantifiedVariables.isEmpty();
    }

    /**
     * Returns a list of all type variables that are bound by an for-all quantifier in the
     * type abstraction.
     * @return a list of all quantified type variables
     */
    public List<TypeVariable> getQuantifiedVariables() {
        return quantifiedVariables;
    }

    /**
     * Getter for the inner type of the type abstraction
     * @return the inner type of the type abstraction
     */
    public Type getInnerType() {
        return type;
    }


}
